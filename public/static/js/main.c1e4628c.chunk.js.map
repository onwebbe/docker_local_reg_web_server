{"version":3,"sources":["logo.svg","components/CommonHeader.js","components/CommonMenu.js","views/RegistDockerServerView.js","components/TagList.js","components/ImageCard.js","components/ImageList.js","views/ImageInfoView.js","views/MainView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CommonHeader","className","gutter","span","style","color","CommonMenu","to","exact","activeStyle","RegistDockerServerView","SubMenu","Header","Content","Sider","props","state","window","localStorage","storedRegistry","getItem","storedRegistryObj","host","port","apiVersion","JSON","parse","handleChange","bind","submitForm","event","fieldValue","target","value","data","getAttribute","this","setState","console","log","regStr","stringify","setItem","message","info","name","onChange","vvalue","type","onClick","React","Component","TagList","tagList","map","tagInfo","i","tagName","ImageCard","cardInfo","title","imageInfo","imageName","width","tags","ImageList","imageInfoList","key","ImageInfoView","require","registryObj","isRegistryReady","getImageInfo","getImageInfoV2","imageList","prop","url","Promise","resolve","reject","axios","get","then","response","resData","success","imageListData","msg","setTimeout","find","index","arr","imageObj","push","display","MainView","background","padding","margin","minHeight","path","component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6KAAAA,EAAOC,QAAU,IAA0B,kC,uLCkB5BC,MAff,WACE,OACE,yBAAKC,UAAU,aACX,uBAAKC,OAAQ,IACT,uBAAKD,UAAU,aAAaE,KAAM,IAC9B,yBAAKF,UAAU,aAAaG,MAAO,CAACC,MAAO,UAA3C,sBAEJ,uBAAKJ,UAAU,aAAaE,KAAM,GAC9B,yBAAKF,UAAU,aAAaG,MAAO,CAACC,MAAO,UAA3C,a,QCMDC,MAff,WACE,OACE,yBAAKL,UAAU,WACX,6BACI,kBAAC,IAAD,CAASM,GAAG,IAAIC,OAAK,EAACC,YACrB,CAACJ,MAAM,SADR,aAIJ,6BAAK,kBAAC,IAAD,CAASE,GAAG,UAAUC,OAAK,EAACC,YAC5B,CAACJ,MAAM,SADP,a,4FCoEEK,G,IA1EPC,Q,IACAC,O,IAAQC,Q,IAASC,M,YAGvB,WAAYC,GAAQ,IAAD,EAGjB,GAHiB,qBACjB,4CAAMA,KACDC,MAAQ,GACTC,OAAOC,aAAc,CACvB,IAAIC,EAAiBD,aAAaE,QAAQ,kBACtCC,EAAoB,CACtBC,KAAM,GACNC,KAAM,GACNC,WAAY,KAEQ,MAAlBL,GAA4C,IAAlBA,IAG5BE,EAAoBI,KAAKC,MAAMP,IAEjC,EAAKH,MAAQK,MACR,CAML,EAAKL,MALmB,CACtBM,KAAM,QACNC,KAAM,QACNC,WAAY,SApBC,OAwBjB,EAAKG,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAzBD,E,0EA2BNE,GACX,IAAIC,EAAaD,EAAME,OAAOC,MAE1BC,EAAO,GACXA,EAFeJ,EAAME,OAAOG,aAAa,SAExBJ,EACjBK,KAAKC,SAASH,GACdI,QAAQC,IAAIH,KAAKpB,S,iCAERc,GACT,GAAIb,OAAOC,aAAc,CACvB,IAAIsB,EAASf,KAAKgB,UAAUL,KAAKpB,OACjCE,aAAawB,QAAQ,iBAAkBF,GACvCG,EAAA,EAAQC,KAAK,Y,+BAIf,OACE,yBAAK3C,UAAU,sBACb,yBAAKA,UAAU,WACX,6BACE,0EAGN,yBAAKA,UAAU,WACX,yBAAKA,UAAU,aAAf,QACA,yBAAKA,UAAU,aAAY,2BAAO4C,KAAK,OAAOZ,MAAOG,KAAKpB,MAAMM,KAAMwB,SAAUV,KAAKT,iBAEzF,yBAAK1B,UAAU,WACX,yBAAKA,UAAU,aAAf,QACA,yBAAKA,UAAU,aAAY,2BAAO4C,KAAK,OAAOZ,MAAOG,KAAKpB,MAAMO,KAAMuB,SAAUV,KAAKT,iBAEzF,yBAAK1B,UAAU,WACX,yBAAKA,UAAU,aAAf,eACA,yBAAKA,UAAU,aAAY,2BAAO4C,KAAK,aAAaE,OAAQX,KAAKpB,MAAMQ,WAAYsB,SAAUV,KAAKT,iBAEtG,yBAAK1B,UAAU,WACb,uBAAQ+C,KAAK,UAAUC,QAASb,KAAKP,YAArC,iB,GAhE2BqB,IAAMC,Y,sECQ5BC,E,+KAXJC,GACH,OACIjB,KAAKrB,MAAMsC,QAAQC,KAAI,SAACC,EAASC,GAC7B,OACI,uBAAKvD,UAAU,UAAUI,MAAM,QAAQkD,EAAQE,gB,GAL7CP,IAAMC,WCebO,E,+KAbJC,GACH,OACE,yBAAK1D,UAAU,aACb,uBAAM2D,MAAOxB,KAAKrB,MAAM8C,UAAUC,UAAW1D,MAAO,CAAE2D,MAAO,SAC3D,yBAAK9D,UAAU,WACb,kBAAC,EAAD,CAASoD,QAASjB,KAAKrB,MAAM8C,UAAUG,c,GAN/Bd,IAAMC,WCyBfc,G,IAvBPtD,Q,IACAC,O,IAAQC,Q,IAASC,M,YAGvB,WAAYC,GAAQ,IAAD,6BACjB,4CAAMA,IACNuB,QAAQC,IAAIxB,EAAMmD,cAAcZ,KAFf,E,sEAKjB,OACElB,KAAKrB,MAAMmD,cAAcZ,KAAI,SAACO,EAAWL,GACvC,OACE,uBAAKvD,UAAU,aAAaE,KAAM,EAAGgE,IAAKX,GACtC,yBAAKvD,UAAU,cACb,kBAAC,EAAD,CAAW4D,UAAWA,a,GAXdX,IAAMC,YC0NfiB,GA7NHC,EAAQ,K,IACZ1D,Q,IACAC,O,IAAQC,Q,IAASC,M,YAGvB,WAAYC,GAAQ,IAAD,EAOjB,GAPiB,qBACjB,4CAAMA,KACDC,MAAQ,CACTsD,YAAa,GACbC,iBAAiB,EACjBL,cAAe,IAEfjD,OAAOC,aAAc,CACvB,IAAIC,EAAiBD,aAAaE,QAAQ,kBACtCC,EAAoB,CACtBC,KAAM,GACNC,KAAM,GACNC,WAAY,KAEQ,MAAlBL,GAA4C,IAAlBA,EAC3B,EAAKH,MAAMuD,iBAAkB,GAE9BlD,EAAoBI,KAAKC,MAAMP,GAC/B,EAAKH,MAAMuD,iBAAkB,GAE/B,EAAKvD,MAAMsD,YAAcjD,MACpB,CAML,EAAKL,MAAMsD,YALa,CACtBhD,KAAM,QACNC,KAAM,QACNC,WAAY,SAzBC,OA6BjBc,QAAQC,IAAI,EAAKvB,OACjB,EAAKwD,eA9BY,E,uLAmCOpC,KAAKqC,kB,OAAvBC,E,OACJtC,KAAKC,UAAS,SAACrB,EAAO2D,GAEpB,OADA3D,EAAMkD,cAAgBQ,EACf1D,K,yLAUX,IAAIG,EAAiBiB,KAAKpB,MAAMsD,YAE5BM,EAAM,oCAAsCzD,EAAeG,KAAO,YAAcH,EAAeI,KACnG,OAAO,IAAIsD,SAAQ,SAACC,EAASC,GAC3BC,IAAMC,IAAIL,GAAKM,MAAK,SAAUC,GAC5B,IAAIC,EAAUD,EAASjD,KACvB,GAAuB,GAAnBkD,EAAQC,QAAiB,CAC3B,IAAIC,EAAgBF,EAAQlD,KAC5B4C,EAAQQ,QAERP,EAAOK,EAAQG,a,4CAoBrB,OAAO,IAAIV,SAAQ,SAACC,EAASC,GAC3BS,YAAW,WAsGTV,EArG6B,CACzB,CACI,UAAa,0BACb,KAAQ,CACJ,CACI,QAAW,WAEf,CACI,QAAW,aAIvB,CACI,UAAa,kCACb,KAAQ,CACJ,CACI,QAAW,aAIvB,CACI,UAAa,mBACb,KAAQ,CACJ,CACI,QAAW,SAIvB,CACI,UAAa,qBACb,KAAQ,CACJ,CACI,QAAW,SAIvB,CACI,UAAa,UACb,KAAQ,CACJ,CACI,QAAW,WAIvB,CACI,UAAa,OACb,KAAQ,CACJ,CACI,QAAW,aAIvB,CACI,UAAa,iBACb,KAAQ,CACJ,CACI,QAAW,aAIvB,CACI,UAAa,0BACb,KAAQ,CACJ,CACI,QAAW,aAIvB,CACI,UAAa,aACb,KAAQ,CACJ,CACI,QAAW,aAIvB,CACI,UAAa,iBACb,KAAQ,CACJ,CACI,QAAW,aAIvB,CACI,UAAa,MACb,KAAQ,CACJ,CACI,QAAW,YAIvB,CACI,UAAa,QACb,KAAQ,CACJ,CACI,QAAW,mB,sCASjBhB,GAOd,IANsB1B,KAAKpB,MAAMkD,cAAcuB,MAAK,SAASxD,EAAOyD,EAAOC,GACzE,OAAI1D,EAAM6B,YAAcA,KAKJ,CACpB,IAAI8B,EAAW,CACb9B,UAAWA,EACXE,KAAM,IAER5B,KAAKpB,MAAMkD,cAAc2B,KAAKD,M,+BAIhC,OACE,yBAAK3F,UAAU,sBACb,yBAAKA,UAAU,UAAUG,MAAO,CAAC0F,QAAS1D,KAAKpB,MAAMuD,gBAAgB,OAAO,KACxE,6BACE,0EAGN,uBAAKrE,OAAQ,CAAC,GAAI,KAChB,kBAAC,EAAD,CAAWgE,cAAe9B,KAAKpB,MAAMkD,sB,GAlNnBhB,IAAMC,YCD1BvC,G,IADAD,Q,IACAC,QAAQC,E,IAAAA,QAASC,E,IAAAA,MA0CViF,MAvCf,WACE,OACE,2BACI,kBAAC,IAAD,KACA,kBAAC,EAAD,CAAQ9F,UAAU,UACd,yBAAKA,UAAU,SACf,kBAAC,EAAD,OAEJ,2BACA,kBAAC,EAAD,CAAO8D,MAAO,IAAK3D,MAAO,CAAE4F,WAAY,SACpC,kBAAC,EAAD,OAEJ,uBAAQ5F,MAAO,CAAE6F,QAAS,gBAMtB,kBAAC,EAAD,CACA7F,MAAO,CACH4F,WAAY,OACZC,QAAS,GACTC,OAAQ,EACRC,UAAW,MAIP,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO3F,OAAK,EAAC4F,KAAK,IAAIC,UAAW3F,IACjC,kBAAC,IAAD,CAAOF,OAAK,EAAC4F,KAAK,UAAUC,UAAWjC,WC5BhDkC,MARf,WACE,OACE,yBAAKrG,UAAU,OACb,kBAAC,EAAD,QCIcsG,QACW,cAA7BtF,OAAOuF,SAASC,UAEe,UAA7BxF,OAAOuF,SAASC,UAEhBxF,OAAOuF,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,MAAK,SAAAgC,GACjCA,EAAaC,kB","file":"static/js/main.c1e4628c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Row, Col } from 'antd';\n\nfunction CommonHeader() {\n  return (\n    <div className=\"appHeader\">\n        <Row gutter={16}>\n            <Col className=\"gutter-row\" span={18}>\n                <div className=\"gutter-box\" style={{color: 'white'}}>Local Registry UI</div>\n            </Col>\n            <Col className=\"gutter-row\" span={6}>\n                <div className=\"gutter-box\" style={{color: 'white'}}>Login</div>\n            </Col>\n        </Row>\n    </div>\n  );\n}\n\nexport default CommonHeader;\n","import React from 'react';\nimport { Link, NavLink} from 'react-router-dom';\nfunction CommonMenu() {\n  return (\n    <div className=\"appMenu\">\n        <div>\n            <NavLink to=\"/\" exact activeStyle={  \n             {color:'blue'}  \n          }>Registry</NavLink>\n        </div>\n        <div><NavLink to=\"/images\" exact activeStyle={  \n             {color:'blue'}  \n          }>Images</NavLink></div>\n    </div>\n  );\n}\n\nexport default CommonMenu;\n","import React from 'react';\nimport { Layout, Menu, Breadcrumb, Icon, Button, message } from 'antd';\nimport CommonHeader from '../components/CommonHeader';\nimport CommonMenu from '../components/CommonMenu';\nconst { SubMenu } = Menu;\nconst { Header, Content, Sider } = Layout;\n\nclass RegistDockerServerView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    if (window.localStorage) {\n      let storedRegistry = localStorage.getItem('storedRegistry');\n      let storedRegistryObj = {\n        host: '',\n        port: '',\n        apiVersion: '2'\n      }\n      if (storedRegistry == null || storedRegistry == '') {\n         \n      } else {\n        storedRegistryObj = JSON.parse(storedRegistry);\n      }\n      this.state = storedRegistryObj;\n    } else {\n      let storedRegistryObj = {\n        host: 'error',\n        port: 'error',\n        apiVersion: 'error'\n      }\n      this.state = storedRegistryObj;\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n  }\n  handleChange(event) {\n    let fieldValue = event.target.value;\n    let fielName = event.target.getAttribute('name');\n    let data = {};\n    data[fielName] = fieldValue;\n    this.setState(data);\n    console.log(this.state);\n  }\n  submitForm(event) {\n    if (window.localStorage) {\n      let regStr = JSON.stringify(this.state);\n      localStorage.setItem('storedRegistry', regStr);\n      message.info('Saved');\n    }\n  }\n  render() {\n    return (\n      <div className='registDockerServer'>\n        <div className='dataRow'>\n            <div>\n              <h3>Please regist your local docker registry</h3>\n            </div>\n        </div>\n        <div className='dataRow'>\n            <div className='dataLabel'>Host</div>\n            <div className='dataField'><input name='host' value={this.state.host} onChange={this.handleChange}/></div>\n        </div>\n        <div className='dataRow'>\n            <div className='dataLabel'>Port</div>\n            <div className='dataField'><input name='port' value={this.state.port} onChange={this.handleChange}/></div>\n        </div>\n        <div className='dataRow'>\n            <div className='dataLabel'>API Version</div>\n            <div className='dataField'><input name='apiVersion' vvalue={this.state.apiVersion} onChange={this.handleChange}/></div>\n        </div>\n        <div className='dataRow'>\n          <Button type=\"primary\" onClick={this.submitForm}>Primary</Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default RegistDockerServerView;\n","import React from 'react';\nimport { Tag } from 'antd';\n\nclass TagList extends React.Component {\n    render(tagList) {\n        return (\n            this.props.tagList.map((tagInfo, i) => {\n                return (\n                    <Tag className='tagItem' color=\"blue\">{tagInfo.tagName}</Tag>\n                )\n            })\n        )\n    }\n}\n\nexport default TagList;\n","import React from 'react';\nimport { Row, Col, Card } from 'antd';\nimport TagList from '../components/TagList';\n\nclass ImageCard extends React.Component {\n    render(cardInfo) {\n        return (\n          <div className=\"imageCard\">\n            <Card title={this.props.imageInfo.imageName} style={{ width: '100%' }}>\n              <div className='tagList'>\n                <TagList tagList={this.props.imageInfo.tags}></TagList>\n              </div>\n            </Card>\n          </div>\n        );\n    }\n}\n\nexport default ImageCard;\n","import React from 'react';\nimport { Layout, Menu, Col } from 'antd';\nimport axios from 'axios';\nimport CommonHeader from '../components/CommonHeader';\nimport CommonMenu from '../components/CommonMenu';\nimport ImageCard from '../components/ImageCard';\nconst { SubMenu } = Menu;\nconst { Header, Content, Sider } = Layout;\n\nclass ImageList extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(props.imageInfoList.map);\n  }\n  render() {\n    return (\n      this.props.imageInfoList.map((imageInfo, i) => {\n        return (\n          <Col className=\"gutter-row\" span={6} key={i}>\n              <div className=\"gutter-box\">\n                <ImageCard imageInfo={imageInfo}></ImageCard>\n              </div>\n          </Col>\n        )\n      })\n    );\n  }\n}\n\nexport default ImageList;\n","import React from 'react';\nimport { Layout, Menu, Breadcrumb, Row } from 'antd';\nimport axios from 'axios';\nimport CommonHeader from '../components/CommonHeader';\nimport CommonMenu from '../components/CommonMenu';\nimport ImageList from '../components/ImageList';\nconst jsonp=require('jsonp');\nconst { SubMenu } = Menu;\nconst { Header, Content, Sider } = Layout;\n\nclass ImageInfoView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        registryObj: {},\n        isRegistryReady: false,\n        imageInfoList: []\n    };\n    if (window.localStorage) {\n      let storedRegistry = localStorage.getItem('storedRegistry');\n      let storedRegistryObj = {\n        host: '',\n        port: '',\n        apiVersion: '2'\n      }\n      if (storedRegistry == null || storedRegistry == '') {\n         this.state.isRegistryReady = false;\n      } else {\n        storedRegistryObj = JSON.parse(storedRegistry);\n        this.state.isRegistryReady = true;\n      }\n      this.state.registryObj = storedRegistryObj;\n    } else {\n      let storedRegistryObj = {\n        host: 'error',\n        port: 'error',\n        apiVersion: 'error'\n      }\n      this.state.registryObj = storedRegistryObj;\n    }\n    console.log(this.state);\n    this.getImageInfo();\n    // this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  async getImageInfo() {\n    try {\n      let imageList = await this.getImageInfoV2();\n      this.setState((state, prop) => {\n        state.imageInfoList = imageList;\n        return state;\n      });\n    } catch (e) {\n\n    }\n  }\n  getImageInfoV1() {\n\n  }\n  getImageInfoV2() {\n    let storedRegistry = this.state.registryObj;\n\n    var url = 'localDocker/getImageList?apihost=' + storedRegistry.host + '&apiport=' + storedRegistry.port;\n    return new Promise((resolve, reject) => {\n      axios.get(url).then(function (response) {\n        let resData = response.data;\n        if (resData.success == true) {\n          let imageListData = resData.data;\n          resolve(imageListData);\n        } else {\n          reject(resData.msg);\n        }\n      });\n    });\n  }\n  getImageInfoV2Dummy() {\n    var url = 'localDocker/getImageList';\n    // jsonp(url,null,(err,data)=>{\n    //   if(err){\n    //     console.log(err)\n    //   }else{\n    //     console.log(data)\n    //   }\n    // })\n    // axios.get(url).then(function (response) {\n    //   console.log(response);\n    //   let resData = response.data;\n    //   // resData = {\"repositories\":[\"cdp_saf_automation_base\",\"copernicium-node\",\"copernicium-sapjvm\",\"coredns\",\"etcd\",\"kube-apiserver\",\"kube-controller-manager\",\"kube-proxy\",\"kube-scheduler\",\"lp3\",\"pause\"]};\n    //   resolve(dockerImageInformation);\n    // });\n    return new Promise((resolve, reject) => {\n      setTimeout(function () {\n        let dockerImageInformation = [\n            {\n                \"imageName\": \"cdp_saf_automation_base\",\n                \"tags\": [\n                    {\n                        \"tagName\": \"1.0beta\"\n                    },\n                    {\n                        \"tagName\": \"2.0beta\"\n                    }\n                ]\n            },\n            {\n                \"imageName\": \"cdp_saf_automation_createdocker\",\n                \"tags\": [\n                    {\n                        \"tagName\": \"2.0beta\"\n                    }\n                ]\n            },\n            {\n                \"imageName\": \"copernicium-node\",\n                \"tags\": [\n                    {\n                        \"tagName\": \"1.0\"\n                    }\n                ]\n            },\n            {\n                \"imageName\": \"copernicium-sapjvm\",\n                \"tags\": [\n                    {\n                        \"tagName\": \"1.0\"\n                    }\n                ]\n            },\n            {\n                \"imageName\": \"coredns\",\n                \"tags\": [\n                    {\n                        \"tagName\": \"1.6.5\"\n                    }\n                ]\n            },\n            {\n                \"imageName\": \"etcd\",\n                \"tags\": [\n                    {\n                        \"tagName\": \"3.4.3-0\"\n                    }\n                ]\n            },\n            {\n                \"imageName\": \"kube-apiserver\",\n                \"tags\": [\n                    {\n                        \"tagName\": \"v1.17.0\"\n                    }\n                ]\n            },\n            {\n                \"imageName\": \"kube-controller-manager\",\n                \"tags\": [\n                    {\n                        \"tagName\": \"v1.17.0\"\n                    }\n                ]\n            },\n            {\n                \"imageName\": \"kube-proxy\",\n                \"tags\": [\n                    {\n                        \"tagName\": \"v1.17.0\"\n                    }\n                ]\n            },\n            {\n                \"imageName\": \"kube-scheduler\",\n                \"tags\": [\n                    {\n                        \"tagName\": \"v1.17.0\"\n                    }\n                ]\n            },\n            {\n                \"imageName\": \"lp3\",\n                \"tags\": [\n                    {\n                        \"tagName\": \"latest\"\n                    }\n                ]\n            },\n            {\n                \"imageName\": \"pause\",\n                \"tags\": [\n                    {\n                        \"tagName\": \"3.1\"\n                    }\n                ]\n            }\n        ];\n        resolve(dockerImageInformation);\n      });\n    });\n  }\n  _addImageByName(imageName) {\n    var isAlreadyExists = this.state.imageInfoList.find(function(value, index, arr) {\n      if (value.imageName === imageName) {\n        return true;\n      }\n      return false;\n    });\n    if (!isAlreadyExists) {\n      let imageObj = {\n        imageName: imageName,\n        tags: []\n      }\n      this.state.imageInfoList.push(imageObj);\n    }\n  }\n  render() {\n    return (\n      <div className='registDockerServer'>\n        <div className='dataRow' style={{display: this.state.isRegistryReady?'none':''}}>\n            <div>\n              <h3>Please regist your local docker registry</h3>\n            </div>\n        </div>\n        <Row gutter={[16, 16]}>\n          <ImageList imageInfoList={this.state.imageInfoList}></ImageList>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default ImageInfoView;\n","import React from 'react';\nimport { Layout, Menu, Breadcrumb, Icon, SwitchAnt } from 'antd';\nimport CommonHeader from '../components/CommonHeader';\nimport CommonMenu from '../components/CommonMenu';\nimport ReactDOM from 'react-dom';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport RegistDockerServerView from '../views/RegistDockerServerView';\nimport ImageInfoView from '../views/ImageInfoView';\nconst { SubMenu } = Menu;\nconst { Header, Content, Sider } = Layout;\n\n\nfunction MainView() {\n  return (\n    <Layout>\n        <HashRouter>\n        <Header className=\"header\">\n            <div className=\"logo\" />\n            <CommonHeader></CommonHeader>\n        </Header>\n        <Layout>\n        <Sider width={200} style={{ background: '#fff' }}>\n            <CommonMenu></CommonMenu>\n        </Sider>\n        <Layout style={{ padding: '0 24px 24px' }}>\n            {/* <Breadcrumb style={{ margin: '16px 0' }}>\n            <Breadcrumb.Item>Home</Breadcrumb.Item>\n            <Breadcrumb.Item>List</Breadcrumb.Item>\n            <Breadcrumb.Item>App</Breadcrumb.Item>\n            </Breadcrumb> */}\n            <Content\n            style={{\n                background: '#fff',\n                padding: 24,\n                margin: 0,\n                minHeight: 280,\n            }}\n            >\n                \n                    <Switch>\n                        <Route exact path='/' component={RegistDockerServerView} />\n                        <Route exact path='/images' component={ImageInfoView} />\n                    </Switch>\n            </Content>\n        </Layout>\n        </Layout>\n        </HashRouter>\n    </Layout>\n  );\n}\n\nexport default MainView;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MainView from './views/MainView';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainView></MainView>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}